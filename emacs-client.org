#+TITLE:  Client Configuration for Emacs
#+AUTHOR: Markus Sievers
#+EMAIL:  markussievers88gmail.com
#+DATE:   2016-05-20
#+TAGS:   emacs

This file is mostly based on Howard Abram's client conficurations. I
have made a few modifications, which is why I added myself as the
author. The settings in this file are only included on a Macintosh,
Linux, or other systems with a graphical front-end.

* Key Bindings

  Gotta get rid of the bloody =C-x C-c=, for it is too close to the
  tangling key binding of =C-c C-v= ... besides, I never quit Emacs.

  #+BEGIN_SRC elisp
    (defun dont-kill-emacs ()
      "This just prints a message with the correct way to stop Emacs."
      (interactive)
      (message "If you really want to quit emacs, call `save-buffers-kill-emacs' directly."))

    (global-set-key (kbd "C-x C-c") 'dont-kill-emacs)
  #+END_SRC

  I would like Command-W to close a frame, but only if it only has a
  single window in it. I found this code on [[http://www.emacswiki.org/emacs/frame-cmds.el][this site]].

  #+BEGIN_SRC elisp
  (defun delete-single-window (&optional window)
    "Remove WINDOW from the display.  Default is `selected-window'.
  If WINDOW is the only one in its frame, then `delete-frame' too."
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (kill-buffer)
      (if (one-window-p t)
          (delete-frame)
          (delete-window (selected-window)))))
  #+END_SRC

* Font Settings

  I love syntax highlighting.

  #+BEGIN_SRC elisp
    (global-font-lock-mode 1)
  #+END_SRC

  Am I really a monospace font slut? I think so. I keep changing my
  font based on the monospace du jour... While I [[http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/download/index.html][M+]] because it is
  thinner and has more white space between lines, but [[http://blogs.adobe.com/typblography/2012/09/source-code-pro.html][Source Code Pro]]
  is so attractive, oh, and then there is Anonymous Pro...
  
  #+BEGIN_SRC elisp
    (defvar ms/fixed-font-family
      (cond ((x-list-fonts "Source Code Pro") "Source Code Pro")
            ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
            ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
      "My fixed width font based on what is installed, `nil' if not defined.")
  #+END_SRC

  To download the Source Code Pro fonts onto my Ubuntu laptop I used
  the following code provided by the [[http://askubuntu.com/questions/193072/how-to-use-the-new-adobe-source-code-pro-font][askubuntu]] community:

  #+BEGIN_SRC sh :tangle no
    #!/bin/bash
    mkdir /tmp/adodefont
    cd /tmp/adodefont
    wget https://github.com/adobe-fonts/source-code-pro/archive/2.010R-ro/1.030R-it.zip
    unzip 1.030R-it.zip
    mkdir -p ~/.fonts
    cp source-code-pro-2.010R-ro-1.030R-it/OTF/*.otf ~/.fonts/
    fc-cache -f -v
  #+END_SRC
  
  With the font name situated, I just need to use that to set the
  three magic frame settings:

  #+BEGIN_SRC elisp
    (when ms/fixed-font-family
      (set-frame-font ms/fixed-font-family)
      (set-face-attribute 'default nil :font ms/fixed-font-family :height 100)
      (set-face-font 'default ms/fixed-font-family))
  #+END_SRC

  Since the headers are based on Adobe’s open source font pair of the
  proportional font, [[https://github.com/adobe-fonts/source-sans-pro/releases/tag/2.010R-ro/1.065R-it][Source Sans Pro]], will match the non-proportional
  font, [[https://github.com/adobe-fonts/source-code-pro/][Source Code Pro]].

  #+BEGIN_SRC  elisp
    (defvar ms/variable-font-tuple
      (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
            ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
            ((x-list-fonts "Verdana")         '(:font "Verdana"))
            ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
            (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
      "My variable width font available to org-mode files and whatnot.")
  #+END_SRC

* Color Theme

  Use the color theme project by following [[http://www.nongnu.org/color-theme/][these instructions]].
  We now can do =M-x color-theme-<TAB> RET=

  #+BEGIN_SRC elisp
    (use-package color-theme
      :ensure t
      :init (require 'color-theme)
      :config (use-package color-theme-sanityinc-tomorrow
               :ensure t))
  #+END_SRC

  The color themes work quite well, except they don't know about the
  org-mode source code blocks, so we need to set up a couple
  functions that we can use to set them.

  #+BEGIN_SRC elisp
    (defun org-src-color-blocks-light ()
      "Colors the block headers and footers to make them stand out more for lighter themes"
      (interactive)
      (custom-set-faces
       '(org-block-begin-line
        ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
       '(org-block-background
         ((t (:background "#FFFFEA"))))
       '(org-block
         ((t (:background "#FFFFEA"))))
       '(org-block-end-line
         ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))

       '(mode-line-buffer-id ((t (:foreground "#005000" :bold t))))
       '(which-func ((t (:foreground "#008000"))))))

    (defun org-src-color-blocks-dark ()
      "Colors the block headers and footers to make them stand out more for dark themes"
      (interactive)
      (custom-set-faces
       '(org-block-begin-line
         ((t (:foreground "#008ED1" :background "#002E41"))))
       '(org-block-background
         ((t (:background "#000000"))))
       '(org-block
         ((t (:background "#000000"))))
       '(org-block-end-line
         ((t (:foreground "#008ED1" :background "#002E41"))))

       '(mode-line-buffer-id ((t (:foreground "black" :bold t))))
       '(which-func ((t (:foreground "green"))))))
  #+END_SRC

  No matter, the theme, I like /some/ of the ideas in the [[https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org][EMagicians Starter Kit]],
  particularly in how the headers are larger, instead of different
  colors.

  #+BEGIN_SRC elisp
     (deftheme ms/org-theme "Sub-theme to beautify org mode")
  #+END_SRC

  Since I’m using the Powerline project, switching my Emacs color
  theme, requires me to call =powerline-reset= in order to get the
  colors to apply to the mode line.

  We put all of these requirements in a single function call:

  #+BEGIN_SRC elisp
    (defun ms/change-theme (theme org-block-style)
      "Changes the color scheme and reset the mode line."
      (funcall theme)
      (powerline-reset)
      (funcall org-block-style)

      (let* ((ms/fixed-font-tuple (list :font ms/fixed-font-family))
             (base-font-color     (face-foreground 'default nil 'default))
             (background-color    (face-background 'default nil 'default))
             (primary-color       (face-foreground 'mode-line nil))
             (secondary-color     (face-background 'secondary-selection nil 'region))
             (headline           `(:inherit default :weight bold :foreground ,base-font-color)))
        (custom-theme-set-faces 'ms/org-theme
                                `(org-agenda-structure ((t (:inherit default :height 2.0 :underline nil))))
                                `(org-verbatim ((t (:inherit 'fixed-pitched :foreground "#aef"))))
                                `(org-table ((t (:inherit 'fixed-pitched))))
                                `(org-block ((t (:inherit 'fixed-pitched))))
                                `(org-block-background ((t (:inherit 'fixed-pitched))))
                                `(org-block-begin-line ((t (:inherit 'fixed-pitched))))
                                `(org-block-end-line ((t (:inherit 'fixed-pitched))))
                                `(org-level-8 ((t (,@headline ,@ms/variable-font-tuple))))
                                `(org-level-7 ((t (,@headline ,@ms/variable-font-tuple))))
                                `(org-level-6 ((t (,@headline ,@ms/variable-font-tuple))))
                                `(org-level-5 ((t (,@headline ,@ms/variable-font-tuple))))
                                `(org-level-4 ((t (,@headline ,@ms/variable-font-tuple :height 1.1))))
                                `(org-level-3 ((t (,@headline ,@ms/variable-font-tuple :height 1.25))))
                                `(org-level-2 ((t (,@headline ,@ms/variable-font-tuple :height 1.5))))
                                `(org-level-1 ((t (,@headline ,@ms/variable-font-tuple :height 1.75))))
                                `(org-document-title ((t (,@headline ,@ms/variable-font-tuple :height 1.5 :underline nil)))))))
  #+END_SRC

  And the default startup goes to...night...unless I'm at work, and
  then we'll take the bright shiny theme. To check if I'm at work I
  assume the it will be between 8 am. and 6 pm and define the
  following function:

  #+BEGIN_SRC elisp
    (defun ms/check-work-hours? ()
      "Check if the current time is after 8 am. and before 8pm"
      (interactive)
      (when (and
             (>= (string-to-number (format-time-string "%H")) 8.)
             (< (string-to-number (format-time-string "%H")) 18.))
          t))
  #+END_SRC

  Now I can check if I am logged in at work and if it is early in the
  morning or evening when I would rather use the dark theme.
  
  #+BEGIN_SRC elisp
    (if (and (equal "sieversm" user-login-name) (ms/check-work-hours?))
      (ms/change-theme 'color-theme-sanityinc-tomorrow-day
                       'org-src-color-blocks-light)
      (ms/change-theme 'color-theme-sanityinc-tomorrow-night
                       'org-src-color-blocks-dark))
  #+END_SRC

  My main reason for wanting to use the color theme project is to
  switch between /black on white/ during the day, and /white on black/
  at night. Because I have to pass function references to my
  =define-sequence= macro defined in in [[file:emacs-support.org][init-support.el]], I use the
  =list= function call instead of quoting the list:

  #+BEGIN_SRC elisp
    (define-sequence 'personal-theme-map "<f9> t" 'ms/change-theme
      (list (list "d" 'color-theme-sanityinc-tomorrow-day      'org-src-color-blocks-light)  ; White on Black
            (list "l" 'color-theme-sanityinc-tomorrow-eighties 'org-src-color-blocks-dark)   ; Lt. Gray on Gray
            (list "m" 'color-theme-sanityinc-tomorrow-bright   'org-src-color-blocks-dark)   ; Bright on Black
            (list "n" 'color-theme-sanityinc-tomorrow-night    'org-src-color-blocks-dark))) ; White on Gray
  #+END_SRC

* Undo and Redo

  According to [[http://ergoemacs.org/emacs/emacs_best_redo_mode.html][this article]], I get better functionality than
  the =redo+= plugin (which I can't seem to get working well).

  #+BEGIN_SRC elisp
    (use-package undo-tree
      :ensure t
      :diminish undo-tree-mode
      :init
      (global-undo-tree-mode 1)
      :config
      (defalias 'redo 'undo-tree-redo)
      :bind (("C-z" . undo)     ; Zap to character isn't helpful
             ("C-S-z" . redo)))
  #+END_SRC

* Frame and Window Size

  I often want to put the window fullscreen:

  #+BEGIN_SRC elisp
    (defun frame-fullscreen ()
      "Set the frame window to cover the full screen."
      (interactive)
      (set-frame-parameter nil 'fullscreen 'fullboth))
  #+END_SRC

  When I am using my large monitors with a full-screen Emacs session
  with two or three side-by-side windows, I want to set them to a
  fixed width:

  #+BEGIN_SRC elisp
    (defun set-window-width (&optional width)
      "Sets the size of the current window to a specific width.
    If no width is specified, it defaults to ~ 80 characters."
      (interactive "p")
      (save-excursion
        (if (not width)
            (setq width 78))
        (if (> (window-width) width)
            (shrink-window-horizontally (- (window-width) width))
          (enlarge-window-horizontally (- width (window-width))))))
  #+END_SRC

  The bell is pretty obnoxious when it dings during scrolling.

  #+BEGIN_SRC elisp
  (setq ring-bell-function 'ignore)
  #+END_SRC

* Technical Artifacts

  Load up the particular operating system variation.

  #+BEGIN_SRC elisp
    (if (eq system-type 'gnu/linux)
        (require 'init-linux)
      nil)
  #+END_SRC

  Notice "Windows" is not listed. That is by design. At least for
  now. 

  Make sure that we can simply =require= this library.

  #+BEGIN_SRC elisp
    (provide 'init-client)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization for Graphical Clients
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-client.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
