#+TITLE:  Supporting Emacs Functions
#+AUTHOR: Howard Abrams
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   2014 Sep 20
#+TAGS:   emacs

Perhaps I should just use the CL package, and not bother with my own
filter function.

* Filter

  While Emacs Lisp has a =mapcar=, it doesn't have a =filter=
  function.

  #+BEGIN_SRC elisp
    (defun filter (condp lst)
      "Emacs Lisp doesn’t come with a ‘filter’ function to keep
    elements that satisfy a conditional and excise the elements that
    do not satisfy it. One can use ‘mapcar’ to iterate over a list
    with a conditional, and then use ‘delq’ to remove the ‘nil’
    values."
      (delq nil
            (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
  #+END_SRC

  Might as well have an =inverse-filter= to filter out everything
  that /doesn't/ match the predicate function:

  #+BEGIN_SRC elisp
    (defun inverse-filter (condp lst)
      "A filter function, but returns a list of the entries that
    don't match the predicate."
      (delq nil
            (mapcar (lambda (x) (and (not (funcall condp x)) x)) lst)))
  #+END_SRC

* Curry and Compose

  I like this [[https://gist.github.com/eschulte/6167923][Eric Schulte's 'curry' functions]]. Allows for more
  compact anonymous functions. The following examples demonstrate the
  usage.

  #+BEGIN_SRC elisp :tangle no
    ;; partial application with `curry'
    (mapcar (» #'+ 2) '(1 2 3 4)) ; => (3 4 5 6)

    ;; alternate order of arguments with `rcurry'
    (mapcar (« #'- 1) '(1 2 3 4)) ; => (0 1 2 3)

    ;; function composition with `compose'
    (mapcar (∘ #'list (» #'* 2)) '(1 2 3 4)) ; => ((2) (4) (6) (8))
  #+END_SRC

  First, define the =curry= function:

  #+BEGIN_SRC elisp
    (defsubst curry (function &rest arguments)
      (lexical-let ((function function)
                    (arguments arguments))
        (lambda (&rest more) (apply function (append arguments more)))))
  #+END_SRC

  And the right-oriented =rcurry= function:

  #+BEGIN_SRC elisp
    (defsubst rcurry (function &rest arguments)
      (lexical-let ((function function)
                    (arguments arguments))
        (lambda (&rest more) (apply function (append more arguments)))))
  #+END_SRC

  And the =compose= function that can accept a number of functions:

  #+BEGIN_SRC elisp
    (defsubst compose (function &rest more-functions)
      (cl-reduce (lambda (f g)
                   (lexical-let ((f f) (g g))
                     (lambda (&rest arguments)
                       (funcall f (apply g arguments)))))))
  #+END_SRC

* Key Sequences

  As I wrote in [[http://www.howardism.org/Technical/Emacs/lists-and-key-sequences.html][key sequences essay]], the following macro makes it
  trivial to create a key sequence, like what I have in [[file:emacs-client.org::*Color%20Theme][emacs-client]]
  initialization file.

  #+BEGIN_SRC elisp
    (defmacro define-sequence (map-name prefix func seqs)
      "Define a collection of key sequences associated with MAP-NAME
    and begin with PREFIX that call a function, FUNC.  The SEQS is a
    list where each element is a list that begins with a final key
    binding. The rest of the list is given as parameters to the
    function, FUNC."
      `(progn
         (define-prefix-command ,map-name)
         (global-set-key (kbd ,prefix) ,map-name)
         (dolist (el ,seqs)
           (lexical-let ((keystroke (car el))
                         (the-rest  (cdr el)))
             (define-key ,map-name (kbd keystroke)
               (lambda ()
                 (interactive)
                 (apply ,func the-rest)))))))
  #+END_SRC

* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-support)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Lisp functional enhancements
#+PROPERTY:    results silent
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-support.el
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
