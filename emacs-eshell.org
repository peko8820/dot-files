#+TITLE:  Emacs EShell Parameters
#+AUTHOR: Markus Sievers
#+EMAIL:  markussievers88@gmail.com
#+DATE:   [2016-05-29 Sun]

Based Howard Abrams' [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][documentation]] and his git-hub dotfiles I have
compiled the file.

* Basics

** Set up the Correct Path

   Need the correct PATH even if we start Emacs from the GUI:

   #+BEGIN_SRC elisp
     (setenv "PATH"
             (concat
              "/usr/local/bin:/usr/local/sbin:"
              (getenv "PATH")))
   #+END_SRC

** Pager Setup

   If any program wants to pause the output through the =$PAGER=
   variable, well, we don't really need that:

   #+BEGIN_SRC elisp
     (setenv "PAGER" "cat")
   #+END_SRC

** Don’t Modify the Text

   Scrolling through the output and searching for results that can be
   copied to the kill ring is a great feature of Eshell. However,
   instead of running =end-of-buffer= key-binding, the following
   setting means any other key will jump back to the prompt:

   #+BEGIN_SRC elisp
     (setq eshell-scroll-to-bottom-on-input t)
   #+END_SRC

   *Note:* hitting return on any other line will copy that line to the
    prompt and immediately execute it.

* Aliases

  Gotta have some [[http://www.emacswiki.org/emacs/EshellAlias][shell aliases]], right?

  #+BEGIN_SRC elisp
    (defalias 'e 'find-file)
    (defalias 'ff 'find-file)
    (defalias 'emacs 'find-file)
  #+END_SRC

  Replacing the window with the new buffer may not be what I want.

  #+BEGIN_SRC elisp
    (defalias 'ee 'find-file-other-window)
  #+END_SRC

  Pull up dired, but without parameters, just use the current directory.

  #+BEGIN_SRC elisp
    (defun eshell/d (&rest args)
      (dired (pop args) "."))
  #+END_SRC

  Some of my favorite bash aliases, can be even more helpful in
  Eshell. Like ‘ll’:

  #+BEGIN_SRC elisp
    (add-hook 'eshell-mode-hook
              (lambda ()
                ;; The 'ls' executable requires the Gnu version on the Mac
                (let ((ls (if (file-exists-p "/usr/local/bin/gls")
                              "/usr/local/bin/gls"
                            "/bin/ls")))
                  (eshell/alias "ll" (concat ls " -AlohG --color=always")))))
  #+END_SRC

   I can never seem to remember that =find= and =chmod= behave
   differently from Emacs than their Unix counterparts, so at this
   time, I will prefer the native implementations.

   #+BEGIN_SRC elisp
     (setq eshell-prefer-lisp-functions nil)
   #+END_SRC

** Git

   My =gst= command is just an alias to =magit-status=, but using the
   =alias= doesn't pull in the current working directory, so I make it
   a function, instead:

   #+BEGIN_SRC elisp
     (defun eshell/gst (&rest args)
         (magit-status (pop args) nil)
         (eshell/echo))   ;; The echo command suppresses output
   #+END_SRC

   What about =gd= to call the Diff command?

   #+BEGIN_SRC elisp
     (defalias 'gd 'magit-diff-unstaged)
     (defalias 'gds 'magit-diff-staged)
   #+END_SRC

** Find File

   We should have an "f" alias for searching the current directory for
   a file, and a "ef" for editing that file.

   #+BEGIN_SRC elisp
     (defun eshell/f (filename &optional dir)
       "Searches in the current directory for files that match the
     given pattern. A simple wrapper around the standard 'find'
     function."
       (let ((cmd (concat
                   "find " (or dir ".")
                   "      -not -path '*/.git*'"
                   " -and -not -path '*node_modules*'"
                   " -and -not -path '*classes*'"
                   " -and "
                   " -type f -and "
                   "-iname '" filename "'")))
         (message cmd)
         (shell-command-to-string cmd)))

     (defun eshell/ef (filename &optional dir)
       "Searches for the first matching filename and loads it into a
     file to edit."
       (let* ((files (eshell/f filename dir))
              (file (car (s-split "\n" files))))
         (find-file file)))
   #+END_SRC

   Typing =find= in Eshell runs the =find= function, which doesn’t do
   what I expect, and creating an alias is ineffective in overriding
   it, so a function will do:

   #+BEGIN_SRC elisp
     (defun eshell/find (&rest args)
       "Wrapper around the ‘find’ executable."
       (let ((cmd (concat "find " (string-join args))))
         (shell-command-to-string cmd)))
   #+END_SRC

* Predicate Filters and Modifiers

  The =T= predicate filter allows me to limit file results that have
  have internal =org-mode= tags. For instance, files that have a
  =#+TAGS:= header with a =mac= label will be given to the =grep=
  function:

  #+BEGIN_SRC sh
     $ grep brew *.org(T'mac')
  #+END_SRC

  To extend Eshell, we need a two-part function.
  1. Parse the Eshell buffer to look for the parameter
     (and move the point past the parameter).
  2. A predicate function that takes a file as a parameter.

  For the first step, we have our function /called/ as it helps
  parse the text at this time.  Based on what it sees, it returns
  the predicate function used to filter the files:

  #+BEGIN_SRC elisp
    (defun eshell-org-file-tags ()
      "Helps the eshell parse the text the point is currently on,
    looking for parameters surrounded in single quotes. Returns a
    function that takes a FILE and returns nil if the file given to
    it doesn't contain the org-mode #+TAGS: entry specified."

      (if (looking-at "'\\([^)']+\\)'")
          (let* ((tag (match-string 1))
                 (reg (concat "^#\\+TAGS:.* " tag "\\b")))
            (goto-char (match-end 0))

            `(lambda (file)
               (with-temp-buffer
                 (insert-file-contents file)
                 (re-search-forward ,reg nil t 1))))
        (error "The `T' predicate takes an org-mode tag value in single quotes.")))
  #+END_SRC

  Add it to the =eshell-predicate-alist= as the =T= tag:

  #+BEGIN_SRC elisp
    (add-hook 'eshell-pred-load-hook (lambda ()
      (add-to-list 'eshell-predicate-alist '(?T . (eshell-org-file-tags)))))
  #+END_SRC

  *Note:* We can’t add it to the list until after we start our first
  eshell session, so we just add it to the =eshell-pred-load-hook=
  which is sufficient.

* Visual Executables

  Eshell would get somewhat confused if I ran the following commands
  directly through the normal Elisp library, as these need the better
  handling of ansiterm:

  #+BEGIN_SRC elisp
    (add-hook 'eshell-mode-hook
       (lambda ()
          (add-to-list 'eshell-visual-commands "ssh")
          (add-to-list 'eshell-visual-commands "tail")))
  #+END_SRC

* Ignoring Directories

  Great shell with some good tweaks taken from [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit-eshell.org][the Starter Kit]]
  project. Ignoring the =.git= directories seem like a good idea.

  #+BEGIN_SRC elisp :tangle no
    ((setq  )etq eshell-cmpl-cycle-completions nil
          eshell-save-history-on-exit t
          eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")
  #+END_SRC

* Special Prompt

  Following [[http://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/][these instructions]], we build a better prompt with the Git
  branch in it (Of course, it matches my Bash prompt). First, we need
  a function that returns a string with the Git branch in it,
  e.g. ":master"

  #+BEGIN_SRC elisp
    (defun curr-dir-git-branch-string (pwd)
      "Returns current git branch as a string, or the empty string if
    PWD is not in a git repo (or the git command is not found)."
      (interactive)
      (when (and (eshell-search-path "git")
                 (locate-dominating-file pwd ".git"))
        (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
          (if (> (length git-output) 0)
              (concat " :" (substring git-output 0 -1))
            "(no branch)"))))
  #+END_SRC

  The function takes the current directory passed in via =pwd= and
  replaces the =$HOME= part with a tilde. I'm sure this function
  already exists in the eshell source, but I didn't find it...

  #+BEGIN_SRC elisp
    (defun pwd-replace-home (pwd)
      "Replace home in PWD with tilde (~) character."
      (interactive)
      (let* ((home (expand-file-name (getenv "HOME")))
             (home-len (length home)))
        (if (and
             (>= (length pwd) home-len)
             (equal home (substring pwd 0 home-len)))
            (concat "~" (substring pwd home-len))
          pwd)))
  #+END_SRC

  Make the directory name be shorter...by replacing all directory
  names with just its first names. However, we leave the last two to
  be the full names. Why yes, I did steal this.

  #+BEGIN_SRC elisp
    (defun pwd-shorten-dirs (pwd)
      "Shorten all directory names in PWD except the last two."
      (let ((p-lst (split-string pwd "/")))
        (if (> (length p-lst) 2)
            (concat
             (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                   (substring elm 0 1)))
                        (butlast p-lst 2)
                        "/")
             "/"
             (mapconcat (lambda (elm) elm)
                        (last p-lst 2)
                        "/"))
          pwd  ;; Otherwise, we just return the PWD
          )))

    ;; Turn off the default prompt.
    (setq eshell-highlight-prompt nil)
  #+END_SRC

  Break up the directory into a "parent" and a "base":

  #+BEGIN_SRC elisp
    (defun split-directory-prompt (directory)
      (if (string-match-p ".*/.*" directory)
          (list (file-name-directory directory) (file-name-base directory))
        (list "" directory)))
  #+END_SRC

  Now tie it all together with a prompt function can color each of the
  prompts components.

  #+BEGIN_SRC elisp
    (setq eshell-prompt-function
          (lambda ()
            (let* ((directory (split-directory-prompt (pwd-shorten-dirs (pwd-replace-home (eshell/pwd)))))
                   (parent (car directory))
                   (name (cadr directory))
                   (branch (or (curr-dir-git-branch-string (eshell/pwd)) "")))

              (if (eq 'dark (frame-parameter nil 'background-mode))
                  (concat   ;; Prompt for Dark Themes
                   (propertize parent 'face `(:foreground "#8888FF"))
                   (propertize name   'face `(:foreground "#8888FF" :weight bold))
                   (propertize branch 'face `(:foreground "green"))
                   (propertize " $"   'face `(:weight ultra-bold))
                   (propertize " "    'face `(:weight bold)))

                (concat    ;; Prompt for Light Themes
                 (propertize parent 'face `(:foreground "blue"))
                 (propertize name   'face `(:foreground "blue" :weight bold))
                 (propertize branch 'face `(:foreground "dark green"))
                 (propertize " $"   'face `(:weight ultra-bold))
                 (propertize " "    'face `(:weight bold)))))))
  #+END_SRC

  Turn off the default prompt, otherwise, it won't use ours:

  #+BEGIN_SRC elisp
    (setq eshell-highlight-prompt nil)
  #+END_SRC

* Stack the Buffer

  One of the few things I miss about ZShell is the ability to easily
  save off a half-finished command for later invocation. I now have
  =M-q= functionality with [[https://github.com/tom-tan/esh-buf-stack][esh-buf-stack]]:

  #+BEGIN_SRC elisp
    (use-package esh-buf-stack
      :ensure t
      :config
      (setup-eshell-buf-stack)
      (add-hook 'eshell-mode-hook
                (lambda ()
                  (local-set-key
                   (kbd "M-q") 'eshell-push-command)))  )
  #+END_SRC

  If half-way through typing a long command and need something else,
  just =M-q= to hide it, type the new command, and continue where I
  left off.

* Shell Here

  If I make an alias that closes a window easily, I can have a quick
  "x" alias that quickly exits and [[file:emacs.org::*Macintosh][closes the window]].

  #+BEGIN_SRC elisp
    (defun eshell/x ()
      "Closes the EShell session and gets rid of the EShell window."
      (kill-buffer)
      (delete-window))
  #+END_SRC

  Now making little Shells whenever I need them makes sense:

  #+BEGIN_SRC elisp
    (defun eshell-here ()
      "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
      (interactive)
      (let* ((parent (if (buffer-file-name)
                         (file-name-directory (buffer-file-name))
                       default-directory))
             (height (/ (window-total-height) 3))
             (name   (car (last (split-string parent "/" t)))))
        (split-window-vertically (- height))
        (other-window 1)
        (eshell "new")
        (rename-buffer (concat "*eshell: " name "*"))

        (insert (concat "ls"))
        (eshell-send-input)))

    (global-set-key (kbd "C-!") 'eshell-here)
  #+END_SRC

* Shell There
  :PROPERTIES:
  :CUSTOM_ID: remote-shell
  :END:

  Would be nice to be able to run an eshell session and use Tramp to
  connect to the remote host in one fell swoop:

  #+BEGIN_SRC elisp
    (defun eshell-there (host)
      (interactive "sHost: ")
      (let ((default-directory (format "/%s:" host)))
        (eshell host)))
  #+END_SRC

  While Eshell /can/ operate on remote systems, it doesn't work too
  well.  Instead, it is better to use the =shell= command.  Since all
  the shell functions that Emacs supplies work with Tramp
  references. This makes it very easy to spawn a shell, or a shell
  command on a remote system...even as root.

   Since the Tramp syntax is a bit verbose, a few /wrapper functions/
   would make things easier. Also, having a list of /favorite hosts/
   with simpler names would also be a nice feature.

   Since Emacs doesn't have a memorize function, define a global
   variable, =remote-shell-fav-hosts=, a hash that maps nicknames of
   hosts to their IP address.

   #+BEGIN_SRC elisp
    (defvar remote-shell-fav-hosts (make-hash-table :test 'equal)
      "Table of host aliases for IPs or other actual references.")
   #+END_SRC

   Can we make a list of what hosts are /pre-known/? What if no hosts
   have been defined? In this case, we want to call the function,
   =remote-shell-fav-hosts-get= to populate it:

   #+BEGIN_SRC elisp
     (defun remote-shell-fav-hosts-map ()
       "Returns the mapping between our simple names of our favorite
     hosts and their IP address. If the map is empty, and the function
     `remote-shell-fav-hosts-get' has been defined, it calls that
     function to populate the map prior to returning it. This may
     return an empty map."
       (when (and #'remote-shell-fav-hosts-get
                  (< 0 (hash-table-count remote-shell-fav-hosts)))
         (remote-shell-fav-hosts-get))
       remote-shell-fav-hosts)
   #+END_SRC

   Because I only have a few local hosts that I am connecting to I
   will define the =remote-shell-fav-hosts-get= function right here:

   #+BEGIN_SRC elisp
     (defun remote-shell-fav-hosts-get ()
       "My interactive function for creating my favorite hostname ip-address pairs"
       (interactive)
       (clrhash remote-shell-fav-hosts)
       (puthash "fliewatuet" "pi@192.168.2.101" remote-shell-fav-hosts))
   #+END_SRC

   *Note:* Both, hostname and address, need to be strings. And whenever
   I need to log into a machine with a username I need to make sure to
   pre-pend that to the address as well.

   In order to populate the =completing-read=, we need a list of hosts:

   #+BEGIN_SRC elisp
     (defun remote-shell-fav-hosts-list ()
       "Simply returns a list of known hosts from the cached map, or
     populates it first if it is empty and the
     `remote-shell-fav-hosts-get' function has been defined."
       (hash-table-keys (remote-shell-fav-hosts-map)))
   #+END_SRC

   Most remote access is done with Tramp, so this function simplifies
   the complex Tramp string creation, mostly using an =sudo= pipe for
   =root= access. If the =remote-shell-fav-hosts= hash is empty, we'll
   populate it when this is called.

   #+BEGIN_SRC elisp
     (defun remote-shell-tramp-connection (hostname &optional root directory)
       "Return a TRAMP connection string to HOSTNAME. If ROOT is
     non-nil, returns an sudo compatible string."
       (when (null directory)
         (setq directory ""))

       ;; The ip address is either the value from a key in our cache, or whatever we pass in:
       (let ((ipaddr (gethash hostname (remote-shell-fav-hosts-map) hostname)))
         (if root
             (format "/ssh:%s|sudo:%s:%s" ipaddr ipaddr directory)
             (format "/ssh:%s:%s"         ipaddr directory))))
   #+END_SRC

   If the window containing the results of the shell connection or
   shell command is the same, we can take advantage of that from
   multiple functions, so:

   #+BEGIN_SRC elisp
     (defun remote-shell-buffer-name (hostname &optional command-str default-name)
       "Returns a standard format for our remote shell command buffer
     windows based on the HOSTNAME and the COMMAND-STR. Uses
     DEFAULT-NAME if specified."
       (cond
        (default-name     default-name)
        (command-str      (let ((command (car (split-string command-str))))
                             (format "*%s:%s*" hostname command)))
        (t                (format "*%s*" hostname))))
   #+END_SRC

   Our simple wrapper function for accessing a remote shell, should
   use =ido= if available.

   #+BEGIN_SRC elisp
     (defun remote-shell (hostname &optional root)
       "Start an shell experience on HOSTNAME, that can be an alias to
     a virtual machine in the overcloud. With prefix command, opens
     the shell as the root user account."
       (interactive
        (list (if #'ido-completing-read
                  (ido-completing-read "Hostname: " (remote-shell-fav-hosts-list))
                (completing-read "Hostname: " (remote-shell-fav-hosts-list)))))

       (when (equal current-prefix-arg '(4))
         (setq root t))
       (let ((default-directory (remote-shell-tramp-connection hostname root)))
         (shell (remote-shell-buffer-name hostname))))
   #+END_SRC

   Instead of starting a shell, what if we just ran a command using the
   =shell-command= (so that commands that end in a =&= are automatically
   ran asynchronously.

   #+BEGIN_SRC elisp
     (defun remote-shell-command (hostname command
                                           &optional root bufname directory)
       "On HOSTNAME, run COMMAND (if the command ends with &, run
     asynchronously). With a `C-u' prefix, run the command as ROOT.
     When non-interactive, you can specify BUFNAME for the buffer's
     name, and DIRECTORY where the command should run."
       (interactive
        (list (if #'ido-completing-read
                  (ido-completing-read "Hostname: " (remote-shell-fav-hosts-list))
                (completing-read "Hostname: " (remote-shell-fav-hosts-list)))
              (read-string "Command: ")))
       (when (equal current-prefix-arg '(4))
         (setq root t))
       (let ((default-directory (remote-shell-tramp-connection hostname root directory)))
         (shell-command command (remote-shell-buffer-name hostname command bufname))))
   #+END_SRC

   With the above helper functions, we can loop over a list of machines,
   and kick off remote work on each one:

   #+BEGIN_SRC elisp
     (defun remote-shell-commands (clients command
                                           &optional root async directory)
       "On each host entry in CLIENTS, run the shell COMMAND,
     optionally as ROOT. If ASYNC is non-nil, appends the `&' to the
     shell command in order to run it asynchronously. Runs the command
     in the default home directory unless DIRECTORY is specified."
       (if async
           (setq command (concat command " &")))
       (dolist (host clients)
         (remote-shell-command host command root nil directory)))
   #+END_SRC

   The results of each command is stored in a separate buffer, and
   since we know what the names are, this command will attempt to load
   them on the side... yeah, this is a bit ugly.

   #+BEGIN_SRC elisp
     (defun remote-shell-commands-show (clients command)
       "Shows each buffer of a previously executed command. For example:

             (let ((my-favs '(\"os-controller\" \"contrail-controller\"
                              \"compute\" \"nagios\" \"elk\"))
                   (command \"chef-client\"))
               (remote-shell-commands my-favs command t t)
               (remote-shell-commands-show my-favs command))"

       (delete-other-windows)
       (let ((first-time t))
         (dolist (host clients)
           (if (not first-time)
               (split-window-vertically)
             (split-window-horizontally)
             (setq first-time nil))

           (other-window 1)
           (switch-to-buffer (remote-shell-buffer-name host command))
           (balance-windows)
           (sit-for 0.5))))
   #+END_SRC

   All this work allows me to do magic:

   #+BEGIN_SRC elisp :tangle no
     (let ((my-favs '("os-controller" "contrail-controller"
                      "compute" "nagios" "elk"))
           (command "chef-client"))
       (remote-shell-commands my-favs command t t)
       (remote-shell-commands-show my-favs command))
   #+END_SRC

   #+BEGIN_SRC elisp :tangle no
     (let ((my-favs '("fliewatuet")))
       (remote-shell my-favs t t)
       (remote-shell-commands-show my-favs command))
   #+END_SRC


   Check out this [[https://www.youtube.com/watch?v=pSjrwSI4OHk][YouTube video recording]] of this section in action.

* Tramp

  The ability to edit files on remote systems is a wonderful win,
  since it means I don't need to have my Emacs environment running on
  remote machines (still a possibility, just not a requirement).

  According to [[http://www.gnu.org/software/emacs/manual/html_node/tramp/Filename-Syntax.html][the manual]], I can access a file over SSH, via:

  #+BEGIN_EXAMPLE
  /ssh:10.52.224.67:blah
  #+END_EXAMPLE

  However, if I set the default method to SSH, I can do this:

  #+BEGIN_EXAMPLE
  /10.52.224.67:blah
  #+END_EXAMPLE

  So, let's do it...

  #+BEGIN_SRC elisp
    (setq tramp-default-method "ssh")
  #+END_SRC

* Better Command Line History

  On [[http://www.reddit.com/r/emacs/comments/1zkj2d/advanced_usage_of_eshell/][this discussion]] a little gem for using IDO to search back through
  the history, instead of =M-R= to display the history in a selectable
  buffer.

  Also, while =M-p= cycles through the history, =M-P= actually moves
  up the history in the buffer (easier than =C-c p= and =C-c n=?):

  #+BEGIN_SRC elisp
    (add-hook 'eshell-mode-hook
         (lambda ()
           (local-set-key (kbd "M-P") 'eshell-previous-prompt)
           (local-set-key (kbd "M-N") 'eshell-next-prompt)
           (local-set-key (kbd "M-R") 'eshell-list-history)
           (local-set-key (kbd "M-r")
                  (lambda ()
                    (interactive)
                    (insert
                     (ido-completing-read "Eshell history: "
                                          (delete-dups
                                           (ring-elements eshell-history-ring))))))))
  #+END_SRC

* Smarter Shell

  After reading Mickey Petersen's [[http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/][Mastering EShell]] article, I like the
  /smart/ approach where the cursor stays on the command (where it can
  be re-edited). Sure, it takes a little while to get used to...

  #+BEGIN_SRC elisp
    (require 'em-smart)
    (setq eshell-where-to-jump 'begin)
    (setq eshell-review-quick-commands nil)
    (setq eshell-smart-space-goes-to-end t)
  #+END_SRC

* Helpers

  Sometimes you just need to change something about the current file
  you are editing...like the permissions or even execute it. Hitting
  =Command-1= will prompt for a shell command string and then append
  the current file to it and execute it.

  #+BEGIN_SRC elisp
    (defun execute-command-on-file-buffer (cmd)
      (interactive "sCommand to execute: ")
      (let* ((file-name (buffer-file-name))
             (full-cmd (concat cmd " " file-name)))
        (shell-command full-cmd)))

    (defun execute-command-on-file-directory (cmd)
      (interactive "sCommand to execute: ")
      (let* ((dir-name (file-name-directory (buffer-file-name)))
             (full-cmd (concat "cd " dir-name "; " cmd)))
        (shell-command full-cmd)))

    (global-set-key (kbd "A-1") 'execute-command-on-file-buffer)
    (global-set-key (kbd "A-!") 'execute-command-on-file-directory)
  #+END_SRC

* Technical Artifacts

  Make sure that we can simply =require= this library.

  #+BEGIN_SRC elisp
    (provide 'init-eshell)
  #+END_SRC

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Eshell
#+PROPERTY:    header-args :results silent
#+PROPERTY:    header-args+ :tangle  ~/.emacs.d/elisp/init-eshell.el
#+PROPERTY:    header-args+ :eval no-export
#+PROPERTY:    header-args+ :comments org
#+PROPERTY:    header-args:sh :tangle no
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
