#+TITLE:  Emacs Org-Mode Settings
#+AUTHOR: Markus Sievers
#+EMAIL:  markussievers88gmail.com
#+DATE:   2016-05-23
#+TAGS:   emacs

Discovering the [[http://orgmode.org][Org Mode]] feature was a big reason why I fell in love
with Emacs and have started to spend countless hours on customizing
and tinkering with my configurations.

* Initial Settings

  Initialization of Org Mode by hooking it into YASnippets, and other settings.

  #+BEGIN_SRC elisp
    (use-package org
      :defer t        ; But it comes with Emacs now!?
      :init
      (setq org-use-speed-commands t
            org-hide-emphasis-markers t
            org-completion-use-ido t
            org-outline-path-complete-in-steps nil
            org-src-fontify-natively t   ;; Pretty code blocks
            org-src-tab-acts-natively t
            org-confirm-babel-evaluate nil
            org-export-with-sub-superscripts '{}
            org-todo-keywords '((sequence "TODO(t)" "DOING(g)" "WAITING(w)" "|" "DONE(d)")
                                (sequence "|" "CANCELED(c)")))
      (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
      (add-to-list 'auto-mode-alist '(".*/[0-9]*$" . org-mode))   ;; Journal entries
      (add-hook 'org-mode-hook 'yas-minor-mode-on)
      :bind (("C-c l" . org-store-link)
             ("C-c c" . org-capture)
             ("C-M-|" . indent-rigidly))
      :config
      ;; (unless (eq system-type 'windows-nt)
        (font-lock-add-keywords            ; A bit silly but my headers are now
         'org-mode `(("^\\*+ \\(TODO\\) "  ; shorter, and that is nice canceled
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚑")
                                nil)))
                     ("^\\*+ \\(DOING\\) "
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "⚐")
                                nil)))
                     ("^\\*+ \\(WAITING\\) "
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "?")
                                nil)))
                     ("^\\*+ \\(CANCELED\\) "
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "✘")
                                nil)))
                     ("^\\*+ \\(DONE\\) "
                      (1 (progn (compose-region (match-beginning 1) (match-end 1) "✔")
                                nil))))) ;;)

      (define-key org-mode-map (kbd "M-C-n") 'org-end-of-item-list)
      (define-key org-mode-map (kbd "M-C-p") 'org-beginning-of-item-list)
      (define-key org-mode-map (kbd "M-C-u") 'outline-up-heading)
      (define-key org-mode-map (kbd "M-C-w") 'org-table-copy-region)
      (define-key org-mode-map (kbd "M-C-y") 'org-table-paste-rectangle)

      (define-key org-mode-map [remap org-return] (lambda () (interactive)
                                                    (if (org-in-src-block-p)
                                                        (org-return)
                                                      (org-return-indent)))))
  #+END_SRC

  *Speed Commands:* If point is at the beginning of a headline or
  code block in org-mode, single keys do fun things. See
  =org-speed-command-help= for details (or hit the ? key at a
  headline).

  Because I frequently insert equations within my documentation I like
  to use the all mighty power of latex. However, whenever I let
  orgmode display the equations  for my they tend to be to small.
  Therefore, I adjust the size a little bit:

  #+BEGIN_SRC elisp
    (setq org-format-latex-options
          '(:foreground default
                        :background default
                        :scale 1.5
                        :html-foreground "Black"
                        :html-background "Transparent"
                        :html-scale 1.0
                        :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
  #+END_SRC

  *Note*: For the most part, I like [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html][electric-indent-mode]], however, it
  doesn't really play well with =org-mode=, so I just bind the Return
  key to the ~org-return-indent~ function and get the same effect (but
  only if I am /not/ in a source code block...which actually insert
  multiple new lines).  This /return and indent/ feature is fine, since
  when I save a file, I automatically strip off [[file:emacs.org::*Strip%20Whitespace%20on%20Save][trailing whitespace]].

  We will use some of the packages from [[http://orgmode.org/worg/org-contrib/][org extras]], especially
  [[http://orgmode.org/worg/org-contrib/org-drill.html][org-drill]] and [[http://orgmode.org/worg/org-contrib/org-mime.html][org-mime]] for HTML exports:

  #+BEGIN_SRC elisp
    (use-package org-drill
      :ensure org-plus-contrib)
  #+END_SRC

  For certain /TODO/ keywords I like to remove the /Scheduled/ and
  /Deadline/ when the /TODO/ state is set to a /done/ state.  First I define
  these keywords in a list:

  #+BEGIN_SRC elisp
    (defvar ms/org-done-keywords '("DONE" "CANCELED")
      "List of keywords denoting completed state of a headline.")
  #+END_SRC

  Next, I create a functions that does the removing:

  #+BEGIN_SRC elisp
    (defun ms/org-remove-shedule-when-done ()
      "Remove schedule when TODO state changes to done state."
      (when (member (org-entry-get nil "TODO") ms/org-done-keywords)
        (org-remove-timestamp-with-keyword org-scheduled-string)
        (org-remove-timestamp-with-keyword org-deadline-string)))
  #+END_SRC

  And finally, I need to hook this function to the
  *org-after-todo-state-change-hook* hook.

  #+BEGIN_SRC elisp
    (add-hook 'org-after-todo-state-change-hook 'ms/org-remove-shedule-when-done)
  #+END_SRC

  I also like to insert the *closed* keyword with a time-stamp and ask
  for a closing note when a task is set to a done state.

  #+BEGIN_SRC elisp
    (setq org-log-done 'note)
  #+END_SRC

* Local Key Bindings

  A couple of short-cut keys to make it easier to edit text.

  #+BEGIN_SRC elisp
    (defun org-text-bold () "Wraps the region with asterisks."
      (interactive)
      (surround-text "*"))
    (defun org-text-italics () "Wraps the region with slashes."
      (interactive)
      (surround-text "/"))
    (defun org-text-code () "Wraps the region with equal signs."
      (interactive)
      (surround-text "="))
  #+END_SRC

  Now we can associate some keystrokes to the org-mode:

  #+BEGIN_SRC elisp
    (add-hook 'org-mode-hook
          (lambda ()
            (local-set-key (kbd "A-b") 'org-text-bold)
            (local-set-key (kbd "s-b") 'org-text-bold)    ;; For Linux
            (local-set-key (kbd "A-i") 'org-text-italics)
            (local-set-key (kbd "s-i") 'org-text-italics)
            (local-set-key (kbd "A-=") 'org-text-code)
            (local-set-key (kbd "s-=") 'org-text-code)))
  #+END_SRC

* Color and Display

  Displaying the headers using various bullets are nice for my presentations.

  #+BEGIN_SRC elisp
    (use-package org-bullets
       :ensure t
       :init (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  Here is my approach for quickly making the initial asterisks for
  listing items and whatnot, appear as Unicode bullets (without
  actually affecting the text file or the behavior).

  #+BEGIN_SRC elisp
     (use-package org-mode
       :init
       (font-lock-add-keywords 'org-mode
        '(("^ +\\([-*]\\) "
               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
  #+END_SRC

  Before we load =org-mode= properly, we need to set the following
  syntax high-lighting parameters. These are used to help bring out
  the source code during literate programming mode.

* Journaling

  Didn't realize that [[http://www.emacswiki.org/emacs/OrgJournal][org-journal]] essentially does what I have been
  doing by hand. With a little customization, I don't have to change
  anything else:

  #+BEGIN_SRC elisp
     (use-package org-journal
        :ensure t
        :init
        (setq org-journal-dir "~/journal/")
        (setq org-journal-date-format "#+TITLE: Journal Entry- %Y-%b-%d (%A)")
        (setq org-journal-time-format ""))
  #+END_SRC

  The time format is the heading for each section. I set it to a
  blank since I really don't care about the time I add a section.

  Nice to /automatically/ insert a specific header if the journal entry
  file is empty using [[https://www.gnu.org/software/emacs/manual/html_node/autotype/Autoinserting.html][auto-insert]].

  A function to easily load today (and yesterday's) journal entry.

  #+BEGIN_SRC elisp
    (defun get-journal-file-today ()
      "Return filename for today's journal entry."
      (let ((daily-name (format-time-string "%Y%m%d")))
        (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-today ()
      "Create and load a journal file based on today's date."
      (interactive)
      (find-file (get-journal-file-today)))

    (global-set-key (kbd "C-c f j") 'journal-file-today)
  #+END_SRC

  Since I sometimes (not often) forget to create a journal entry,
  and need to re-write history.

  #+BEGIN_SRC elisp
    (defun get-journal-file-yesterday ()
      "Return filename for yesterday's journal entry."
      (let ((daily-name (format-time-string "%Y%m%d" (time-subtract (current-time) (days-to-time 1)))))
        (expand-file-name (concat org-journal-dir daily-name))))

    (defun journal-file-yesterday ()
      "Creates and load a file based on yesterday's date."
      (interactive)
      (find-file (get-journal-file-yesterday)))

    (global-set-key (kbd "C-c f y") 'journal-file-yesterday)
  #+END_SRC

  Seems like I need to have the inserted template match the file's
  name, not necessarily today's date:

  #+BEGIN_SRC elisp
    (defun journal-file-insert ()
      "Insert's the journal heading based on the file's name."
      (interactive)
      (when (string-match "\\(20[0-9][0-9]\\)\\([0-9][0-9]\\)\\([0-9][0-9]\\)" (buffer-name))
        (let ((year  (string-to-number (match-string 1 (buffer-name))))
              (month (string-to-number (match-string 2 (buffer-name))))
              (day   (string-to-number (match-string 3 (buffer-name))))
              (datim nil))
          (setq datim (encode-time 0 0 0 day month year))
          (insert (format-time-string org-journal-date-format datim))
          (insert "\n\n"))))  ; Start with a blank separating line

     (add-to-list 'auto-insert-alist '(".*/[0-9]*$" . journal-file-insert))
  #+END_SRC

  I really would really like to read what I did last year "at this
  time", and by that, I mean, 365 days ago, plus or minus a few to get
  to the same day of the week.

  #+BEGIN_SRC elisp
    (defun journal-last-year-file ()
      "Returns the string corresponding to the journal entry that
    happened 'last year' at this same time (meaning on the same day
    of the week)."
    (let* ((last-year-seconds (- (float-time) (* 365 24 60 60)))
           (last-year (seconds-to-time last-year-seconds))
           (last-year-dow (nth 6 (decode-time last-year)))
           (this-year-dow (nth 6 (decode-time)))
           (difference (if (> this-year-dow last-year-dow)
                           (- this-year-dow last-year-dow)
                         (- last-year-dow this-year-dow)))
           (target-date-seconds (+ last-year-seconds (* difference 24 60 60)))
           (target-date (seconds-to-time target-date-seconds)))
      (format-time-string "%Y%m%d" target-date)))

    (defun journal-last-year ()
      "Loads last year's journal entry, which is not necessary the
    same day of the month, but will be the same day of the week."
      (interactive)
      (let ((journal-file (concat org-journal-dir (journal-last-year-file))))
        (find-file journal-file)))

      (global-set-key (kbd "C-c f L") 'journal-last-year)
  #+END_SRC

** Taking Meeting Notes

   I've notice that while I really like taking notes in a meeting, I
   don't always like the multiple windows I have opened, so I created
   this function that I can easily call to eliminate distractions
   during a meeting.

   #+BEGIN_SRC elisp
     (defun meeting-notes ()
       "Call this after creating an org-mode heading for where the notes for the meeting
     should be. After calling this function, call 'meeting-done' to reset the environment."
       (interactive)
       (outline-mark-subtree)                              ;; Select org-mode section
       (narrow-to-region (region-beginning) (region-end))  ;; Only show that region
       (deactivate-mark)
       (delete-other-windows)                              ;; Get rid of other windows
       (text-scale-set 2)                                  ;; Text is now readable by others
       (fringe-mode 0)
       (message "When finished taking your notes, run meeting-done."))
   #+END_SRC

   Of course, I need an 'undo' feature when the meeting is over...

   #+BEGIN_SRC elisp
     (defun meeting-done ()
       "Attempt to 'undo' the effects of taking meeting notes."
       (interactive)
       (widen)                                       ;; Opposite of narrow-to-region
       (text-scale-set 0)                            ;; Reset the font size increase
       (fringe-mode 1)
       (winner-undo))                                ;; Put the windows back in place
   #+END_SRC

* Auto Note Capturing

  Let's say you were in the middle of something, but would like to
  /take a quick note/, but without affecting the file you are
  working on. This is called a "capture", and is bound to the
  following key:

  General notes are stored in [[file:~/personal/notes.org][notes.org]], and tasks synced with my
  Google Task list are stored in [[file:~/personal/tasks.org][tasks.org]]:

  #+BEGIN_SRC elisp
     (setq org-default-notes-file "~/personal/notes.org")
     (setq org-default-tasks-file "~/personal/tasks.org")
  #+END_SRC

  This will bring up a list of /note capturing templates/. I actually
  override this in my [[file:emacs-local.org::*Org%20Configuration][system-specific "local" configuration]] file.

  #+BEGIN_SRC elisp
    (defun ms/first-header ()
        (goto-char (point-min))
        (search-forward-regexp "^\* ")
        (beginning-of-line 1)
        (point))

    (setq org-capture-templates
          '(("n" "Thought or Note"  entry
             (file org-default-notes-file)
             "* %?\n\n  %i\n\n  See: %a" :empty-lines 1)
            ("j" "Journal Note"     entry
             (file (get-journal-file-today))
             "* %?\n\n  %i\n\n  From: %a" :empty-lines 1)
            ("t" "Task Entry"        entry
             (file org-default-tasks-file)
             "* %?\n\n  %i\n\n  From: %a" :empty-lines 1)))
  #+END_SRC

  After you have selected the template, you type in your note and hit
  =C-c C-c= to store it in the file listed above.

  Just remember, at some point to hit =C-c C-w= to /refile/ that note
  in the appropriate place.

* Literate Programming

  The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
  allows org-mode to not only interpret source code blocks, but
  evaluate them and tangle them out to a file.

  #+BEGIN_SRC elisp
    (use-package org
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((sh         . t)
         (js         . t)
         (emacs-lisp . t)
         (perl       . t)
         (scala      . t)
         (clojure    . t)
         (python     . t)
         (R          . t)
         (ruby       . t)
         (dot        . t)
         (css        . t)
         (plantuml   . t))))
  #+END_SRC

  It seems to automatically recognize the language used in a source
  block, but if not, call =org-babel-lob-ingest= to add all the
  languages from the code blocks in a particular file into the list
  that Babel supports.  Keystroke: =C-c C-v i=.

  According to [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][the narrow-widen article]], we can have =C-x C-s= get
  out of editing org-mode source code blocks:

  #+BEGIN_SRC elisp
    (eval-after-load 'org-src
      '(define-key org-src-mode-map
         (kbd "C-x C-s") #'org-edit-src-exit))
  #+END_SRC

** Just Evaluate It

   I'm normally fine with having my code automatically evaluated.

   #+BEGIN_SRC elisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC

** Font Coloring in Code Blocks

   Once upon a time, fontifying individual code blocks made it
   impossible to edit the block without =org-edit-special=. Now that
   the syntax rendering is faster, I keep it on.

   #+BEGIN_SRC elisp
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
   #+END_SRC

* Source Block Folding

  Although there are built-in functions to hide/show all source blocks
  I took the inspiration from [[http://emacs.stackexchange.com/questions/7211/collapse-src-blocks-in-org-mode-by-default][this]] blog post that wraps the hide/show
  functionality inside a neat toggle function. But first I define a
  variable that holds the current state of the toggle:

  #+BEGIN_SRC elisp
    (defvar org-blocks-hidden nil)
  #+END_SRC

  Next the function definition.

  #+BEGIN_SRC elisp
    (defun org-toggle-blocks ()
      (interactive)
      (if org-blocks-hidden
          (org-show-block-all)
        (org-hide-block-all))
      (setq-local org-blocks-hidden (not org-blocks-hidden)))
  #+END_SRC

  Then we need to hook it to the org-mode:

  #+BEGIN_SRC elisp
    (add-hook 'org-mode-hook 'org-toggle-blocks)
  #+END_SRC

  And finally I bind the function to the =C-c t= keyboard sequence:

  #+BEGIN_SRC elisp
    (define-key org-mode-map (kbd "C-c t") 'org-toggle-blocks)
  #+END_SRC

* Technical Artifacts

  Need to provide the =init-org-mode= so that I can require this
  package.

  #+BEGIN_SRC elisp
    (provide 'init-org-mode)
  #+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization of Org-Mode
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-org-mode.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
