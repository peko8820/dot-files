#+TITLE:  F2 Keybindings for Emacs
#+AUTHOR: Howard
#+EMAIL:  howard.abrams@gmail.com
#+DATE:   2015 Jan 04
#+TAGS:   technical emacs

The *F2* is used to enter odd characters not normally available or
phrases I want to type a bit too often.

    #+BEGIN_SRC elisp
      (define-prefix-command 'f2-global-map)
      (global-set-key (kbd "<f2>") 'f2-global-map)
    #+END_SRC

* Unicode Characters

  Some of my frequently used Unicode characters:

#+BEGIN_SRC elisp
  (define-key f2-global-map (kbd "<up>") "‚Üë")
  (define-key f2-global-map (kbd "<down>") "‚Üì")
  (define-key f2-global-map (kbd "<left>") "‚Üê")
  (define-key f2-global-map (kbd "<right>") "‚Üí")
  (define-key f2-global-map (kbd "S-<up>") "‚áë")
  (define-key f2-global-map (kbd "S-<down>") "‚áì")
  (define-key f2-global-map (kbd "S-<left>") "‚áê")
  (define-key f2-global-map (kbd "S-<right>") "‚áí")

  (define-key f2-global-map (kbd "p") "‚ñØ")   ;; Representation of a cursor

  (define-key f2-global-map (kbd "'") "‚Äô")
  (define-key f2-global-map (kbd "\"") "‚Äò")

  (define-key f2-global-map (kbd "8") "‚Ä¢")
  (define-key f2-global-map (kbd "*") "¬∞")
  (define-key f2-global-map (kbd "d") "‚Ä†")
  (define-key f2-global-map (kbd "D") "‚Ä°")
  (define-key f2-global-map (kbd "-") "‚Äî")
  (define-key f2-global-map (kbd ".") "‚Ä¶")
  (define-key f2-global-map (kbd ";") "üòâ")
  (define-key f2-global-map (kbd ")") "‚ò∫")

  (define-key f2-global-map (kbd "A") "Œ±")   ;; Lowercase Greek is uppercase
  (define-key f2-global-map (kbd "B") "Œ≤")
  (define-key f2-global-map (kbd "E") "Œµ")
  (define-key f2-global-map (kbd "L") "Œª")
  (define-key f2-global-map (kbd "P") "œÄ")
  (define-key f2-global-map (kbd "M") "Œº")
  (define-key f2-global-map (kbd "T") "Œ∏")
#+END_SRC

  Most key-bindings accept a string that will be inserted, but some
  strings (notably those with Unicode symbols that refer to numbers),
  actually become a prefix, so a little closure should do the trick:

  #+BEGIN_SRC elisp
  (require 'cl)

  (defun ha/insert (ch)
    (lexical-let ((chr ch))
       (lambda () (interactive) (insert chr))))
  #+END_SRC

  Key-bindings for special numeric symbols:

  #+BEGIN_SRC elisp
  (define-key f2-global-map (kbd "!") (ha/insert "¬π"))
  (define-key f2-global-map (kbd "@") (ha/insert "¬≤"))
  (define-key f2-global-map (kbd "#") (ha/insert "¬≥"))
  (define-key f2-global-map (kbd "$") (ha/insert "‚Å¥"))

  (define-key f2-global-map (kbd "2") (ha/insert "¬Ω"))
  (define-key f2-global-map (kbd "3") (ha/insert "‚Öì"))
  (define-key f2-global-map (kbd "4") (ha/insert "¬º"))
  #+END_SRC

* Italic and Bold Letters

  For mathematical and other equations, I like to be able to enter
  bold and italic letters, but instead of a series of calls and the
  matching glyph, I can create a function that uses the =lexical-let=
  to return a lambda expression suitable for passing on to =mapcar*=:

  #+BEGIN_SRC elisp
    (defun ha/letter-mapping (key-prefix)
      (lexical-let ((keyprefix key-prefix))
        (lambda (chr glyph)
          (define-key f2-global-map
            (kbd (concat keyprefix (string chr))) (string glyph)))))
  #+END_SRC

  The mathematical italic Capital A in Unicode is U+1D434 and Z is U+1D44D.
  A sequence mapping the letters ‚ÄòA‚Äô to ‚ÄòZ‚Äô are /zipped/ together:

  #+BEGIN_SRC elisp
  (mapcar* (ha/letter-mapping "M-")
           (number-sequence 65 90)
           (number-sequence #x01D434 #x01D44D))
  #+END_SRC

  So ùê¥ is entered with a =F2 M-A=

  Do the same thing with the lower case letters, were
  Lowercase italic a is U+1D44E and z is U+1D467:

  #+BEGIN_SRC elisp
  (mapcar* (ha/letter-mapping "M-")
           (number-sequence 97 122)
           (number-sequence #x01D44E #x01D467))
  #+END_SRC

  We‚Äôll bind both the Meta and Control keys for the bold and italic expressions.
  Where capital bold A is U+1D468, and lower bold a is U+1D482:

  #+BEGIN_SRC elisp
  (mapcar* (ha/letter-mapping "C-M-")
           (number-sequence 65 90)
           (number-sequence #x01D468 #x01D481))

  (mapcar* (ha/letter-mapping "C-M-")
           (number-sequence 97 122)
           (number-sequence #x01D482 #x01D49B))
  #+END_SRC

* Math Symbols

  I really don‚Äôt type that much math, but in trying to translate some
  mathematically-minded papers, I realize that I could use a few:

  #+BEGIN_SRC elisp
  (define-key f2-global-map (kbd "=") "‚â°")
  (define-key f2-global-map (kbd ":") "‚âî")
  (define-key f2-global-map (kbd "~") "‚âù")
  #+END_SRC

  Most math, however, should be based on the meta prefix:

  #+BEGIN_SRC elisp
  (define-key f2-global-map (kbd "M-.") "‚à¥")  ; Therefore
  (define-key f2-global-map (kbd "M-,") "‚àµ")  ; Therefore
  (define-key f2-global-map (kbd "M-t") "‚ä¢")  ; Turnstile ... to assert
  (define-key f2-global-map (kbd "M-T") "‚âú")  ; Should be a triangle over equal sign
  (define-key f2-global-map (kbd "M-n") "‚àÖ")  ; Empty Set
  (define-key f2-global-map (kbd "M-e") "‚àÉ")  ; There exists
  (define-key f2-global-map (kbd "M-E") "‚àÑ")  ; There does not exist
  (define-key f2-global-map (kbd "M-i") "‚à©")  ; Intersection
  (define-key f2-global-map (kbd "M-u") "‚à™")  ; Union
  (define-key f2-global-map (kbd "M-6") "‚ãÄ")  ; Conjunction
  (define-key f2-global-map (kbd "M-^") "‚ãÅ")  ; Disjunction
  (define-key f2-global-map (kbd "M-*") "‚úï")  ; Multiply
  (define-key f2-global-map (kbd "M-/") "√∑")  ; Divide
  (define-key f2-global-map (kbd "M-!") "¬¨")  ; Logical Not
  #+END_SRC

* Favorite Phrases

  What do I really need to enter that often that auto-completion
  doesn‚Äôt immediately solve?

  #+BEGIN_SRC elisp
    (define-key f2-global-map (kbd "H") "Howard Abrams")
  #+END_SRC

* Technical Artifacts

  Make sure that we can simply =require= this library.

#+BEGIN_SRC elisp
  (provide 'init-f2)
#+END_SRC

  Before you can build this on a new system, make sure that you put
  the cursor over any of these properties, and hit: =C-c C-c=

#+DESCRIPTION: A literate programming version of my Emacs Initialization for Graphical Clients
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no
#+PROPERTY:    tangle ~/.emacs.d/elisp/init-f2.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
